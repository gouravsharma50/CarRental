@page "/makes/"
@inject HttpClient _client
@inject IJSRuntime Js

<h3 class="cart-title">Car Makes</h3>
<hr />

@if (lst == null)
{
    <div class="alert alert-info">Loading...</div>
}
else
{
    <table class="table table-responsive-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in lst)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <a href="/makes/view/@item.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/makes/edit/@item.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" onclick="@(()=>Delete(item.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>

    </table>

}

@code {

    private List<Make> lst;

    protected async override Task OnInitializedAsync()
    {
        lst = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
    }

    async Task Delete(int id)
    {
        var make = lst.First(x => x.Id == id);
        if (await Js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}"))
        {
            await _client.DeleteAsync($"{Endpoints.MakesEndpoint}/{id}");
            await OnInitializedAsync();
        }
    }

}
